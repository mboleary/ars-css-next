// Contains the layout classes

@use 'sass:map';

$content-width: 1024px;

$default-margin: 5px;

// Breakpoints
$breakpoints: (
    0: 768px,
    1: 960px,
    2: 1080px
);

// Min Width for cards
$min-width: 240px;
$default-width: 240px;

// Breakpoints for grid columns
$grid-breakpoints: (
    0: (
        "size": 640px,
        "col": 1
    ),
    1: (
        "size": 1024px,
        "col": 2
    ),
    2: (
        "size": 1280px,
        "col": 3
    ),
    3: (
        "size": 1650px,
        "col": 4
    ),
    4: (
        "size": 1920px,
        "col": 6
    )
);

// Mixins

@mixin container($width: $content-width, $margin: auto) {
    margin: 0% $margin;
    overflow: auto;
    max-width: $width;
    overflow: visible;
}

@mixin colspan($cols: 1) {
    grid-column: span $cols;
    @each $index, $obj in $grid-breakpoints {
        $size: map.get($obj, "size");
        $col: map.get($obj, "col");
        @if $cols >= $col {
            @if $index == 0 {
                @media only screen and (max-width: $size) {
                    & {
                        grid-column: span $col;
                    }
                }
            }
            @else {
                $prev-size: map.get(map.get($grid-breakpoints, $index - 1), "size");
                @media only screen and (max-width: $size) and (min-width: ($prev-size + 1)) {
                    & {
                        grid-column: span $col;
                    }
                }
            }
        }
    }
}

// Container Classes
.container {
    @include container;
}
@each $index, $size in $breakpoints {
    @if $index == 0 {
        @media only screen and (max-width: $size) {
            .container {
                @include container($width: unset, $margin: $default-margin);
            }
        }
    }
    @else {
        $prev-size: map.get($breakpoints, $index - 1);
        @media only screen and (max-width: $size) and (min-width: ($prev-size + 1)) {
            .container {
                @include container($width: $prev-size - 10);
            }
        }
    }
}

.full-height {
    height: 100%;
}

.full-width {
    width: 100%;
}

.full-vh {
    height: 100vh;
}

.full-vw {
    width: 100vw;
}

.text-center {
    text-align: center;
}

.margin {
    margin: 0 $default-margin;
}

.margin-2x {
    margin: 0 ($default-margin * 2);
}

.margin-auto {
    margin: 0 auto;
}

.margin-top-bottom {
    margin: $default-margin 0;
}

.margin-top-bottom-2x {
    margin: ($default-margin * 2) 0;
}

.margin-top-bottom-auto {
    margin: auto 0;
}

.overflow-y {
    overflow-y: auto;
}

.overflow-visible {
    overflow: visible;
}

// Flex classes
.flex-layout {
    display: flex;
    &.vertical {
        flex-direction: column;
        .reverse {
            flex-direction: column-reverse;
        }
    }
    &.horizontal {
        flex-direction: row;
        .reverse {
            flex-direction: row-reverse;
        }
    }
    &.wrap {
        flex-wrap: wrap;
    }
    &.center {
        align-items: center;
        justify-content: center;
    }
}

.flex {
    flex: 1 1 auto;
}

.flex-grow {
    flex: 1 0 auto
}

.flex-shrink {
    flex: 0 1 auto;
}

// Responsive flex (turns from row to column at a breakpoint)
@each $index, $size in $breakpoints {
    @media only screen and (max-width: $size) {
        .flex-layout.responsive.bp-#{$index} {
            flex-direction: column;
            .reverse {
                flex-direction: column-reverse;
            }
        }
    }
    @media only screen and (min-width: ($size + 1)) {
        .flex-layout.responsive.bp-#{$index} {
            flex-direction: row;
            .reverse {
                flex-direction: row-reverse;
            }
        }
    }
}

// Constant Height

.height-10 {
    height: 10px;
}

.height-20 {
    height: 20px;
}

// Element styling

body {
    margin: 0;
    min-height: 100vh;
}

h1,h2,h3 {
    margin: ($default-margin * 2) 0;
}

h4,h5,h6 {
    margin: $default-margin 0;
}

p {
    margin: ($default-margin * 2) 0;
}

img.cover {
    object-fit: cover;
}

img.contain {
    object-fit: contain;
}

// Grid layout classes

.grid-layout {
    display: grid;
    grid-auto-rows: auto;
    margin: 0 ($default-margin * 2);
    align-items: stretch;
    grid-auto-flow: row dense;
    // grid-template-columns: repeat(auto-fill, $default-width);

    @each $index, $obj in $grid-breakpoints {
        $size: map.get($obj, "size");
        $col: map.get($obj, "col");
        @if $index == 0 {
            @media only screen and (max-width: $size) {
                & {
                    grid-template-columns: repeat($col, 1fr);
                }
            }
        }
        @else {
            $prev-size: map.get(map.get($grid-breakpoints, $index - 1), "size");
            @media only screen and (max-width: $size) and (min-width: ($prev-size + 1)) {
                & {
                    grid-template-columns: repeat($col, 1fr);
                }
            }
        }
    }

    $last-breakpoint: map.get($grid-breakpoints, length(map.values($grid-breakpoints)) - 1);
    $last-size: map.get($last-breakpoint, "size");
    $last-col: map.get($last-breakpoint, "col");
    @media only screen and (min-width: $last-size) {
        & {
            grid-template-columns: repeat($last-col, 1fr);
        }
    }
}

.grid-colspan-2 {
    @include colspan(2);
}

.grid-colspan-3 {
    @include colspan(3);
}

.grid-rowspan-2 {
    grid-row: span 2;
}

.grid-rowspan-3 {
    grid-row: span 3;
}

.grid-gap {
    gap: ($default-margin*2);
}

// Relative layout

.rel-layout {
    position: relative;
    & > .abs {
        position: absolute;
        &.fill {
            height: 100%;
            width: 100%;
        }
        &.zero {
            top: 0;
            left: 0;
        }
        &.bottom-right {
            bottom: -20px;
            right: -20px;
            &.p-10 {
                bottom: -10px;
                right: -10px;
            }
            &.p-5 {
                bottom: -5px;
                right: -5px;
            }
        }
    }
    & > .rel {
        position: relative;
    }
}

// Z-index

.z-1 {
    z-index: 1;
}

.z-10 {
    z-index: 10;
}